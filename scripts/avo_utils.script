--[[-- INFO -------------------------------------------------------------------
	File				: avo_utils
	Description	: Various game utilities
	Credits			: aVo, Alundaio
	Revision		: 0.1
	Change Date	: 07.25.2013
--]] --------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ INI UTILS
--/----------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ Read from ini file
--/----------------------------------------------------------------------------
function read_from_ini(ini,section,line,var_type,default)
	if not (ini) then
		ini = system_ini()
	end

	if (section and line and ini:section_exist(section) and ini:line_exist(section,line)) then
		if (var_type == "bool") then
			return ini:r_bool(section,line)
		elseif (var_type == "string") then
			return ini:r_string(section,line)
		elseif (var_type == "float") then
			return ini:r_float(section,line)
		else
			return ini:r_string_wq(section,line)
		end
	else
		return default
	end
end

--/----------------------------------------------------------------------------
--/ Parse ini section to table: [key] = value
--/----------------------------------------------------------------------------
function parse_ini_section_to_array(ini,section)
	local tmp = nil
	local trim = avo_string.trim
	if ini and ini:section_exist(section) then
		tmp = {}
		local result, id, value = nil, nil, nil
		for a = 0, ini:line_count(section) - 1 do
			result, id, value = ini:r_line(section,a,"","")
			if id ~= nil and trim(id) ~= "" and trim(id) ~= nil then
				tmp[trim(id)] = trim(value)
			end
		end
	end
	return tmp
end

--/----------------------------------------------------------------------------
--/ GAME UTILS
--/----------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ Save variable to pstore
--/----------------------------------------------------------------------------
function save_var(game_object,name,value)
	xr_logic.pstor_store(game_object,name,value)
	return val
end
--/----------------------------------------------------------------------------
--/ Load variable from pstore
--/----------------------------------------------------------------------------
function load_var(game_object,name,def_value)
	return xr_logic.pstor_retrieve(game_object,name,def_value)
end
--/----------------------------------------------------------------------------
--/ When NPC switches online add his ID to DB
--/----------------------------------------------------------------------------
function add_stalker(npc)
	if not (db.OnlineStalkers) then
		db.OnlineStalkers = {}
	end
	table.insert(db.OnlineStalkers,npc:id())
end
--/----------------------------------------------------------------------------
--/ When NPC goes offline remove his ID from DB
--/----------------------------------------------------------------------------
function del_stalker(npc)
	if not (db.OnlineStalkers) then
		return
	end
	for i = #db.OnlineStalkers, 1, -1 do
		if (npc:id() == db.OnlineStalkers[i]) then
			table.remove(db.OnlineStalkers,i)
			break
		end
	end
end
--/----------------------------------------------------------------------------
--/ Find stalker who is closest to (npc). Can pass npc, or "cam" for actors camera
--/----------------------------------------------------------------------------
function get_nearest_stalker(npc)
	if not (db.OnlineStalkers) then
		return
	end
	local stalker
	local dist
	local nearest_stalker, nearest_dist
	local pos
	for i=1, #db.OnlineStalkers do
		stalker = db.storage[db.OnlineStalkers[i]] and db.storage[db.OnlineStalkers[i]].object or level.object_by_id(db.OnlineStalkers[i])
		if (stalker and stalker:alive()) then
			pos = npc == "cam" and device().cam_pos or npc:position()
			dist = pos:distance_to_sqr(stalker:position())
			if not (nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end

			if (dist < nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end
		end
	end
	return nearest_stalker, nearest_dist
end
--/----------------------------------------------------------------------------
--/ Get NPC using you aiming at. Uses X-Ray Extensions for level.get_target_obj
--/----------------------------------------------------------------------------
function get_target_npc()
	local obj = get_target_at_cursor()
	if (obj) and IsStalker(obj) then
		return obj
	end
end

function get_target_at_cursor()
	if (level.get_target_obj) then
		return level.get_target_obj()
	end
end
--/----------------------------------------------------------------------------
--/ Switch online/offline
--/----------------------------------------------------------------------------
function switch_online(id)
	if id == -1 then return end
	local sim = alife()
	if sim then
		sim:set_switch_online(id,true)
		sim:set_switch_offline(id,false)
	end
end
function switch_offline(id)
	local sim = alife()
	if sim then
		sim:set_switch_online(id,false)
		sim:set_switch_offline(id,true)
	end
end

--/----------------------------------------------------------------------------
--/ Check if object is a weapon
--/----------------------------------------------------------------------------
function item_is_fa(o,c)
	if not c then
		c = o and o:clsid()
	end
	local t = {
	[clsid.wpn_pm_s] = true,
	[clsid.wpn_walther_s] = true,
	[clsid.wpn_usp45_s] = true,
	[clsid.wpn_hpsa_s] = true,
	[clsid.wpn_bm16_s] = true,
	[clsid.wpn_shotgun_s] = true,
	[clsid.wpn_auto_shotgun_s] = true,
	[clsid.wpn_ak74_s] = true,
	[clsid.wpn_lr300_s] = true,
	[clsid.wpn_groza_s] = true,
	[clsid.wpn_val_s] = true,
	[clsid.wpn_vintorez_s] = true,
	[clsid.wpn_svu_s] = true,
	[clsid.wpn_svd_s] = true,
	[clsid.wpn_rg6_s] = true,
	[clsid.wpn_rpg7_s] = true,
	[clsid.wpn_knife_s] = true}
	if c and t[c] then
		return true
	end
	return false
end