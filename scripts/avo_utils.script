--[[-- INFO -------------------------------------------------------------------
	File				: avo_utils
	Description	: Various game utilities
	Credits			: aVo, Alundaio
	Revision		: 0.1
	Change Date	: 07.25.2013
--]] --------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ INI UTILS
--/----------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ Read from ini file
--/----------------------------------------------------------------------------
function read_from_ini(ini,section,line,var_type,default)
	if not (ini) then
		ini = system_ini()
	end

	if (section and line and ini:section_exist(section) and ini:line_exist(section,line)) then
		if (var_type == "bool") then
			return ini:r_bool(section,line)
		elseif (var_type == "string") then
			return ini:r_string(section,line)
		elseif (var_type == "float") then
			return ini:r_float(section,line)
		else
			return ini:r_string_wq(section,line)
		end
	else
		return default
	end
end

--/----------------------------------------------------------------------------
--/ Parse ini section to table: [key] = value
--/----------------------------------------------------------------------------
function parse_ini_section_to_array(ini,section)
	local tmp = nil
	local trim = avo_string.trim
	if ini and ini:section_exist(section) then
		tmp = {}
		local result, id, value = nil, nil, nil
		for a = 0, ini:line_count(section) - 1 do
			result, id, value = ini:r_line(section,a,"","")
			if id ~= nil and trim(id) ~= "" and trim(id) ~= nil then
				tmp[trim(id)] = trim(value)
			end
		end
	end
	return tmp
end

--/----------------------------------------------------------------------------
--/ NPC UTILS
--/----------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ When NPC switches online add his ID to DB
--/----------------------------------------------------------------------------
function add_stalker(npc)
	if not (db.OnlineStalkers) then
		db.OnlineStalkers = {}
	end
	table.insert(db.OnlineStalkers,npc:id())
end
--/----------------------------------------------------------------------------
--/ When NPC goes offline remove his ID from DB
--/----------------------------------------------------------------------------
function del_stalker(npc)
	if not (db.OnlineStalkers) then
		return
	end
	for i = #db.OnlineStalkers, 1, -1 do
		if (npc:id() == db.OnlineStalkers[i]) then
			table.remove(db.OnlineStalkers,i)
			break
		end
	end
end
--/----------------------------------------------------------------------------
--/ Find stalker who is closest to (npc). Can pass actor, npc, or "cam"
--/----------------------------------------------------------------------------
function get_nearest_stalker(npc)
	if not (db.OnlineStalkers) then
		return
	end
	local stalker
	local dist
	local nearest_stalker, nearest_dist
	local pos
	for i=1, #db.OnlineStalkers do
		stalker = db.storage[db.OnlineStalkers[i]] and db.storage[db.OnlineStalkers[i]].object or level.object_by_id(db.OnlineStalkers[i])
		if (stalker and stalker:alive()) then
			pos = npc == "cam" and device().cam_pos or npc:position()
			dist = pos:distance_to_sqr(stalker:position())
			if not (nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end

			if (dist < nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end
		end
	end
	return nearest_stalker, nearest_dist
end