--[[-- INFO -------------------------------------------------------------------
	File				: avo_lua
	Description	: Various LUA extensions (string, table, math, etc)
	Credits			: aVo
	Revision		: 0.1
	Change Date	: 07.30.2013
--]] --------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ Variables		
--/----------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ Initialization	
--/----------------------------------------------------------------------------
function _init()
	--/ string
	ext_namespace("string","trim",this.trim) --/  trim spaces
	ext_namespace("string","split",this.split)	--/ split into table by delim
	ext_namespace("string","format_ext",this.format_ext) --/ format with tostring
	ext_namespace("string","get_filename",this.get_filename) --/ get filename from path
	
	--/ table
	ext_namespace("table","find",this.find)	--/ check if value exists in table
	ext_namespace("table","clone",this.clone)	--/ clone table
	ext_namespace("table","size",this.size) --/ get size of hash table
	
	--/ math
	ext_namespace("math","isnan",this.isnan)
	ext_namespace("math","isinf",this.isinf)
	ext_namespace("math","isfinite",this.isfinite)
	ext_namespace("math","round",this.round) --/ round to decimal or integer
	ext_namespace("math","rand",this.rand) --/ random number
	
end

--/----------------------------------------------------------------------------
--/ STRING
--/----------------------------------------------------------------------------
--/ split string by delimiter. do_trim = true by default
function split(str, delim, do_trim)
	local t = {}
	if not delim then delim = ',' end
	if type(str) ~= 'string' then
		return t
	end
	local cpt = string.find(str, delim, 1, true)
	if cpt then
		repeat
			if do_trim then
				table.insert(t, trim(string.sub(str, 1, cpt-1)))
			else
				table.insert(t, string.sub(str, 1, cpt-1))
			end
			str = string.sub(str, cpt + string.len(delim))
			cpt = string.find(str, delim, 1, true)
		until cpt == nil
	end
	if not do_trim then
		table.insert(t, str)
	else
		table.insert(t, trim(str))
	end
	return t
end

--/ trim whitespaces from both sides
function trim(str)
	return (string.gsub(str, "^%s*(.-)%s*$", "%1"))
end

--/ replace each place holder %s with tostring(p) of parameters ...
function format_ext(text,...)
	if not text then return end
	local i = 0
	local p = {...}
	return string.gsub(text,"%%s",function(a) i = i + 1 return tostring(p[i]) end)
end

--/ get file name without extension from path
function get_filename(path)
	return tostring(string.match(trim(path), "^.*\\(.-)%.%a-$"))
end

--/----------------------------------------------------------------------------
--/ TABLE
--/----------------------------------------------------------------------------
--/ check if value exists in the table
function find(val, tbl)
  for _, v in ipairs(tbl) do
    if v == val then
      return true
    end
  end
  return false
end

--/ clone table. usedata is not cloned
--/ with_meta - clone metatables, false by default
function clone(tbl, with_meta)
  local lookup_table = {}
  local function _copy(tbl)
    if type(tbl) ~= "table" then
      return tbl
    elseif lookup_table[tbl] then
      return lookup_table[tbl]
    end
    local new_table = {}
    lookup_table[tbl] = new_table
    for index, value in pairs(tbl) do
      new_table[_copy(index)] = _copy(value)
    end
		if with_meta then
			return setmetatable(new_table, _copy(getmetatable(tbl)))
		else
			return new_table
		end
  end
  return _copy(tbl)
end

--/ return number of key-value pairs in a table
function size(tbl)
	num = 0
	for k,v in pairs(tbl) do
    num = num + 1
	end
	return num
end

--/----------------------------------------------------------------------------
--/ MATH
--/----------------------------------------------------------------------------
math.inf = 1/0
math.nan = -(0/0)
--/ check if the number value is a NaN (not a number)
function isnan(value)
	return value ~= value
end

--/ check if the number value is positive or negative infinity
function isinf(value)
	if value == -inf then
		return -1
	elseif value == inf then
		return 1
	else
		return 0
	end
end

--/ check if the given number has finite value i.e. it is not infinite or NAN.
function isfinite(value)
	return value > -inf and value < inf
end

--/ rounds a value to the nearest integer or specified number of decimal places
function round(value, decimals)
	local mul = math.pow(10,decimals) --/ 10^count
	return math.floor(value*mul +0.5)/mul
end

--/ generates random number. if no arguments given will generate between zero and one
function rand(min_value, max_value)
	math.randomseed(device():time_global())
	if not min_value == nil and max_value == nil then
		return math.random()
	else
		return math.random(min_value, max_value)
	end
end