local function printf(fmt,...)
	avo_log.log(string.format(fmt,...))
end

local	Counters = {}
local	Names = {}
local	timer = profile_timer()
local	old_hook_func, old_hook_mask, old_hook_count
local	started = false

local function getname(func)
  local	n = Names[func]
  local	loc = string.format("[%s]:%s", n.short_src == "[C]" and 'C++' or avo_lua.get_filename(n.short_src), n.linedefined)
  if n.namewhat ~= '' then
    return string.format("%s (%s)", loc, n.name)
  else
    return string.format("%s", loc)
  end
end

local function hook(context, line_number)
	assert(context ~= 'line')

	local f = debug.getinfo(2, "f").func
	local caller = debug.getinfo(3, "f")
	local g = nil
	if caller then g = caller.func end

	if context == 'return' then
		local	object = Counters[f]
		if object then
			object.timer:stop()
			object.child_timer:stop()
			if g then
				local	object = Counters[g]
				if object then
					object.timer:start()
				end
			end
		end
		return
	end

	if context == 'tail return' then
		if g then
			local	object = Counters[g]
			if object then
				object.timer:start()
			end
		end
		
		return
	end

	assert(context == 'call')

	if g then
		local	object = Counters[g]
		if object then
			object.timer:stop()
		end
	end
	
	if not Counters[f] then
		Counters[f]	= {count=1,timer=profile_timer(),child_timer=profile_timer()}
		local	object = Counters[f]
		object.child_timer:start()
		object.timer:start()
		Names[f] = debug.getinfo(2,"Snl")
	else
		local	object = Counters[f]
		object.count = object.count + 1
		object.child_timer:start()
		object.timer:start()
	end
end

function setup_hook(do_not_print_message)
	if started then
		return
	end
	
	timer:start()

	old_hook_func = nil 
	old_hook_mask = nil 
	old_hook_count = debug.gethook()
	
  debug.sethook()
	debug.sethook(hook, "cr")
    
  started = true
   	
  if not do_not_print_message then
  	printf("profiler is activated")
  end
end

function clear_hook()	
  if not started then		
	printf("profiler hook wasn't setup!")
  	return
  end
	debug.sethook()
	timer:stop()
	started	= false
end

function stats()
	if not started then
		printf("profiler hook wasn't setup!")
		return
	end

	clear_hook()
	
	printf("----| profiler statistics |----")
	
	local sort_stats = {}
    for func, count in pairs(Counters) do
			local	n = getname(func)
			if (nil == sort_stats[n]) then
				sort_stats[n]	= count
			else 
				sort_stats[n].count = sort_stats[n].count	+ count.count
				sort_stats[n].timer	= sort_stats[n].timer	+ count.timer
				sort_stats[n].child_timer	= sort_stats[n].child_timer + count.child_timer
			end
    end

  local script = profile_timer()
  local	count = 0
	local	out_stats = {}
	
  for i,j in pairs(sort_stats) do
		local	k = i
		if k == "[C++]:-1" then
			k	= "#uncrecognized C/C++ stuff"
		end
		
		table.insert(out_stats,{name=k,count=j})
		
		script = script + j.timer
		count	= count + j.count
  end

	table.sort(
		out_stats,
		function (a,b)
			return (a.count.timer < b.count.timer)
		end
	)
	
	printf(" total_time (pecent)  child_time [call count][average call time] : [script]:line (function)")
  for n,c in pairs(out_stats) do
		printf("%9.2fms (%5.2f%%) %9.2fms [  %8d][     %9.2fmks] : %s",c.count.timer:time()/1000,c.count.timer:time()*100/script:time(),c.count.child_timer:time()/1000,c.count.count, c.count.timer:time()/(c.count.count),c.name)
  end
    
	-- printf("")
	-- printf(" pure time :   %%%%   :  children  :   count  : function name")
	printf("")
	printf("profile time : %8.2fms",timer:time()/1000)
	printf("script time  : %8.2fms (%5.2f%%)",script:time()/1000,script:time()*100/timer:time())
	printf("call count   : %8d",count)

	setup_hook(true)
end

function clear()
	if started then
		clear_hook()
	end

	Counters = {}
	Names	= {}
	timer	= profile_timer()
	
	setup_hook(true)
end
