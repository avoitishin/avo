--[[-- INFO -------------------------------------------------------------------
	File				: avo_controller.script
	Description	: Module orchestration script
	Credits			: aVo, Alundaio
	Revision		: 0.2
	Change Date	: 07.26.2013
--]] --------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ Local variables
--/----------------------------------------------------------------------------
local sname = script_name() --/ script name

local fs = getFS() --/ get file manager object

local modules_root = "$avo_modules$" --/ location of module configs. This is set in fsgame.ltx
local modules_path = string.gsub(fs:update_path(modules_root, ""), fs:update_path("$game_config$", ""), "") --/ location of module configs for ini_file initialization
local modules_mask = "avo_*_m.ltx" --/ only files maching this pattern will be loaded
local module_section = "module" --/ this section is required for each module
local modules_populated = false --/ flag
local modules = {} --/ all modules (enabled and disabled) are stored here

local schemes = {} --/ logic schemes

--/----------------------------------------------------------------------------
--/ Initialize mod. Called from _g.start_game_callback. Debug or any other modules are unavailable
--/----------------------------------------------------------------------------
function _init()
	_G.ASSERT = ASSERT
  init_signals() --/ initialize signals manager
	init_modules() --/ initialize modules
  sm:call("avo_game_start") --/ fired game started signal
end

--/----------------------------------------------------------------------------
--/ Initialize signals manager
--/----------------------------------------------------------------------------
function init_signals()
  local sm = avo_signals.get_mgr()
  if sm then _G.sm = sm else abort("(%s) falied to initialize signals manager", sname) end
  _G.slot = avo_signals.slot
end

--/----------------------------------------------------------------------------
--/ Enable and initialize module
--/----------------------------------------------------------------------------
function init_module(name, ini)
	local module = _G[name]
	if module and type(module._init) == "function" then
		module._init(ini) --/ initialize module passing module ini_file instance to it
		modules[name].enabled = true --/ if previous step was successful, mark module as enabled
	end
end

--/----------------------------------------------------------------------------
--/ Get module names (files) from @modules_root directory
--/----------------------------------------------------------------------------
local function get_module_names()
	if not fs:path_exist(modules_root) then abort(modules_root..
		[[
 was not found in fsgame.ltx. Please add this line at the end of fsgame.ltx:
	]]..modules_root..[[           = true|  false| $game_config$|          avo\modules\
		]])
	end --/ reminder to add @modules_root root
	
	local t = {}
	local f_list = fs:file_list_open_ex(modules_root, bit_or(FS.FS_ListFiles, FS.FS_ClampExt), modules_mask) --/ get list of files (without extension)
	local f_cnt = f_list:Size() --/ how many files do we have
	if f_cnt == 0 then --/ if there are no files log and abort or return empty???
		avo_log.wlog("NO MODULE FILES found in %s", modules_root)
		return t --/ or abort
	end
	for i = 0, f_cnt - 1 do
		local file = f_list:GetAt(i)
		local f_name = file:NameShort()
		table.insert(t, f_name)
	end
	return t
end

--/----------------------------------------------------------------------------
--/ Build modules hash and initialize enabled modules
--/----------------------------------------------------------------------------
function init_modules()
	if modules_populated then return modules end --/ if already populated return to requestor
	local t = get_module_names()
	if #t == 0 then return t end
	for _, name in ipairs(t) do
		local enabled = false
		local config = name..".ltx"
		local ini = ini_file(modules_path..config)
		if ini:section_exist(module_section) then
			modules[name] = {enabled = false, cfg = modules_path..config}
			modules_populated = true --/ set the flag
			enabled = avo_utils.read_from_ini(ini, module_section, "enabled", "bool", false)
		end
		if enabled then
			init_module(name, ini)
		end
	end
	ini = nil --/ speed up garbage collector pickup
	return modules
end

--/----------------------------------------------------------------------------
--/ Get config path (for ini_file constructor) by module name
--/----------------------------------------------------------------------------
function ini_by_name(name)
	if modules[name] then return modules[name].cfg end
end

--/----------------------------------------------------------------------------
--/ Cleanup
--/----------------------------------------------------------------------------
function finalize()
	
end

--/----------------------------------------------------------------------------
--/ Helpers
--/----------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ game specific assert. will crash game if cond is false
--/----------------------------------------------------------------------------
function ASSERT(cond, msg)
  if not cond then
    abort(msg)
  end
end

--[[-- TODO -------------------------------------------------------------------
	1. Enable/register scheme
	2. Disable scheme
	3. Get action id
	4. Get eval id
--]]---------------------------------------------------------------------------