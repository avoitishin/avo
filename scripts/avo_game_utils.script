--[[-- INFO -------------------------------------------------------------------
	File				: avo_utils
	Description	: Various game utilities
	Credits			: aVo, Alundaio
	Revision		: 0.3
	Change Date	: 08.24.2013
--]] --------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ variables
--/----------------------------------------------------------------------------
local self_name = script_name()
-- game tables
local tables_ini = "avo\\avo_tables.ltx"
local squad_community_by_behaviour = {}
local monster_classes = {}
local stalker_classes = {}
local weapon_classes = {}
local artefact_classes = {}
--/----------------------------------------------------------------------------
--/ initialization
--/----------------------------------------------------------------------------
function _init()
	init_slots() -- subscribe to game events
	db.avo.online = {} -- database of online objects
	db.avo.online.stalkers = {} -- database of online stalkers
	db.avo.online.monsters = {} -- database of online monsters
	
	build_tables()
end

function init_slots()
	slot("stalker_net_spawn", this.on_stalker_net_spawn)
	slot("stalker_net_destroy", this.on_stalker_net_destroy)
end

--/----------------------------------------------------------------------------
--/ callbacks
--/----------------------------------------------------------------------------
function on_stalker_net_spawn(motivator_binder, se_object)
	local npc = motivator_binder.object
	table.insert(db.avo.online.stalkers, npc:id()) -- add to db of online stalkers
end

function on_stalker_net_destroy(motivator_binder)
	local npc = motivator_binder.object
	for i = #db.avo.online.stalkers, 1, -1 do -- remove from db
		if (npc:id() == db.avo.online.stalkers[i]) then
			table.remove(db.avo.online.stalkers,i)
			break
		end
	end
end

--/----------------------------------------------------------------------------
--/ Positional functions
--/----------------------------------------------------------------------------
--/ find stalker and distance closest to npc. Can pass npc, or "cam" for actor
function get_nearest_stalker(npc, max_dist)
	if not max_dist then max_dist = 500 end -- actual game dist will be sqrt of this (~22m)
	local stalker, dist, nearest_stalker, nearest_dist, pos
	for i=1, #db.avo.online.stalkers do
		repeat -- added
		stalker = db.storage[db.avo.online.stalkers[i]] and db.storage[db.avo.online.stalkers[i]].object or level.object_by_id(db.avo.online.stalkers[i])
		if (stalker and stalker:alive()) then
			pos = npc == "cam" and device().cam_pos or npc:position()
			dist = pos:distance_to_sqr(stalker:position())
			if dist > max_dist then break end -- added
			if not (nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end

			if (dist < nearest_dist) then
				nearest_dist = dist
				nearest_stalker = stalker
			end
		end
		until true -- added
	end
	return nearest_stalker, nearest_dist
end

--/----------------------------------------------------------------------------
--/ Inventory functions
--/----------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ Object Control functions
--/----------------------------------------------------------------------------

function get_target_npc() -- get npc actor is aiming at
	local obj = get_target_object()
	if obj and is_stalker(obj) then
		return obj
	end
end

function get_target_object() -- get object actor is aiming at
	if level.get_target_obj then
		return level.get_target_obj() -- xray extensions
	end
end

function switch_online(id)
	local sim = alife()
	if id < 1 or id > 65535 then return end
	if sim then
		sim:set_switch_online(id,true)
		sim:set_switch_offline(id,false)
	end
end

function switch_offline(id)
	local sim = alife()
	if id < 1 or id > 65535 then return end
	if sim then
		sim:set_switch_online(id,false)
		sim:set_switch_offline(id,true)
	end
end

--/----------------------------------------------------------------------------
--/ Indentity functions
--/ TODO: remove ASSERT when confirm correct call sequence
--/----------------------------------------------------------------------------
local function read_ini_sect_clsid(ini,section) -- helper to read clsid(s) from ini file section
	local tmp = nil
	local trim = string.trim
	if ini and ini:section_exist(section) then
		tmp = {}
		local result, id, value = nil, nil, nil
		for a = 0, ini:line_count(section) - 1 do
			result, id, value = ini:r_line(section,a,'','')
			if id ~= nil and trim(id) ~= '' then
				local class_id = clsid[id]
				if class_id then 
					tmp[class_id] = value
				end
			end
		end
	end
	return tmp
end

local function get_clsid(obj)
	if obj == nil then return nil end
	return obj:clsid()
end

function build_tables() -- prepare game tables
	local ini = ini_file(tables_ini)
	monster_classes = read_ini_sect_clsid(ini, 'monster_classes')
	stalker_classes = read_ini_sect_clsid(ini, 'stalker_classes')
	weapon_classes = read_ini_sect_clsid(ini, 'weapon_classes')
	artefact_classes = read_ini_sect_clsid(ini, 'artefact_classes')
end

function is_monster(obj)
	ASSERT(table.size(monster_classes) > 0, "monster_classes table has not be initialized yet. Too early to call is_monster(...)")
	local id = get_clsid(obj)
	return monster_classes[id] ~= nil
end

function is_stalker(obj)
	ASSERT(table.size(stalker_classes) > 0, "stalker_classes table has not be initialized yet. Too early to call is_stalker(...)")
	local id = get_clsid(obj)
	return stalker_classes[id] ~= nil
end

function is_weapon(obj)
	ASSERT(table.size(weapon_classes) > 0, "weapon_classes table has not be initialized yet. Too early to call is_weapon(...)")
	local id = get_clsid(obj)
	return weapon_classes[id] ~= nil
end

function is_artefact(obj)
	ASSERT(table.size(weapon_classes) > 0, "artefact_classes table has not be initialized yet. Too early to call is_artefact(...)")
	local id = get_clsid(obj)
	return artefact_classes[id] ~= nil
end

--/----------------------------------------------------------------------------
--/ Check if object is a weapon. 
--/ TODO: refactor and build tables of weapons, items, etc
--/----------------------------------------------------------------------------
function item_is_fa(o,c)
	if not c then
		c = o and o:clsid()
	end
	local t = {
	[clsid.wpn_pm_s] = true,
	[clsid.wpn_walther_s] = true,
	[clsid.wpn_usp45_s] = true,
	[clsid.wpn_hpsa_s] = true,
	[clsid.wpn_bm16_s] = true,
	[clsid.wpn_shotgun_s] = true,
	[clsid.wpn_auto_shotgun_s] = true,
	[clsid.wpn_ak74_s] = true,
	[clsid.wpn_lr300_s] = true,
	[clsid.wpn_groza_s] = true,
	[clsid.wpn_val_s] = true,
	[clsid.wpn_vintorez_s] = true,
	[clsid.wpn_svu_s] = true,
	[clsid.wpn_svd_s] = true,
	[clsid.wpn_rg6_s] = true,
	[clsid.wpn_rpg7_s] = true,
	[clsid.wpn_knife_s] = true}
	if c and t[c] then
		return true
	end
	return false
end

function get_object_community(obj)
	if type(obj.id) == "function" then
		return character_community(obj)
	else
		return alife_character_community(obj)
	end
end

function character_community(obj)
	if is_stalker(obj) then
		return obj:character_community()
	end
	return "monster"
end

function alife_character_community(obj)
	if is_stalker(obj) then
		return obj:community()
	end
	return "monster"
end

