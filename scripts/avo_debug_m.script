--[[-- INFO -------------------------------------------------------------------
	File				: avo_debug_m
	Description : Debug functions and callbacks for most game events
	Credits		 	: aVo
	Revision		: 0.4
	Change Date : 07.26.2013
--]]---------------------------------------------------------------------------
--[[-- TODO -------------------------------------------------------------------
	1. luacap debug functionality
--]]---------------------------------------------------------------------------
--/----------------------------------------------------------------------------
--/ Variables
--/----------------------------------------------------------------------------
local empty = function(...) end --/ plug
local sname = script_name()

local top_enabled = false
local left_enabled = false
local right_enabled = false
local keybind_shift_key = DIK_keys.DIK_RCONTROL
local keybind_toggle_top_hud = DIK_keys.DIK_HOME
local keybind_toggle_left_hud = DIK_keys.DIK_DELETE
local keybind_toggle_right_hud = DIK_keys.DIK_END

--/----------------------------------------------------------------------------
--/ Module entry point.
--/----------------------------------------------------------------------------
function _init(ini)
	_G.callstack = this.callstack
	_G.abort = this.abort

	--/ Logging
	local printf_log = avo_utils.read_from_ini(ini,"logging","printf","bool",false)
	local debug_log = avo_utils.read_from_ini(ini,"logging","debug","bool",false)
	local warning_log = avo_utils.read_from_ini(ini,"logging","warning","bool",false)
	local error_log = avo_utils.read_from_ini(ini,"logging","error","bool",false)
	local visual_log = avo_utils.read_from_ini(ini,"logging","visual","bool",false)
	if debug_log then _G.dlog = avo_log.dlog else _G.dlog = empty end
	if warning_log then _G.wlog = avo_log.wlog else _G.wlog = empty end
	if error_log then _G.elog = avo_log.elog else _G.elog = empty end
	if visual_log then _G.vlog = avo_log.vlog else _G.vlog = empty end
	if printf_log then _G.printf = avo_log.printf else _G.printf = empty end
	
	--/ Debug
	local dev_debug = avo_utils.read_from_ini(ini,"debug","dev_debug","bool",false)
	local sim_debug = avo_utils.read_from_ini(ini,"debug","sim_debug","bool",false)
	if dev_debug then _G.dev_debug = true end
	if sim_debug then _G.sim_debug = true end
	
	--/ Debug HUD
	top_enabled = avo_utils.read_from_ini(ini,"debug_hud","top_enabled","bool",false)
	left_enabled = avo_utils.read_from_ini(ini,"debug_hud","left_enabled","bool",false)
	right_enabled = avo_utils.read_from_ini(ini,"debug_hud","right_enabled","bool",false)
	keybind_shift_key = DIK_keys["DIK_"..avo_utils.read_from_ini(ini,"debug_hud","keybind_shift_key","string","RCONTROL")]
	keybind_toggle_top_hud = DIK_keys["DIK_"..avo_utils.read_from_ini(ini,"debug_hud","keybind_toggle_top_hud","string","HOME")]
	keybind_toggle_left_hud = DIK_keys["DIK_"..avo_utils.read_from_ini(ini,"debug_hud","keybind_toggle_left_hud","string","DELETE")]
	keybind_toggle_right_hud = DIK_keys["DIK_"..avo_utils.read_from_ini(ini,"debug_hud","keybind_toggle_right_hud","string","END")]
	
	dlog("shift key: %d", keybind_shift_key)
	dlog("top hud key: %d", keybind_toggle_top_hud)
	
	--/ Callbacks
	if avo_utils.read_from_ini(ini,"callbacks","enabled","bool",false) then init_slots() end
end

--/----------------------------------------------------------------------------
--/ Build call stack trace 
--/----------------------------------------------------------------------------
function callstack()
	local	t = {}
	if debug then
		t = avo_string.split(debug.traceback(), '\n', true)
		for k,v in pairs(t) do
			if string.match(v, "stack traceback") then 
				next(t)
			else
				t[k] = string.format("[%d] %s", k-1, string.gsub(string.gsub(v, ".+\\", ""), ">", ""))
			end
		end
	end
	return t
end

--/----------------------------------------------------------------------------
--/ Abort game and log error details
--/----------------------------------------------------------------------------
function abort(msg, ...)
	avo_log.log("[ABORT] "..avo_log.dbg_format(msg, ...))
	avo_log.log(table.concat(callstack(), '\n'))
  avo_log.flush()
  local fail = avo_abort_game/0
end

--/----------------------------------------------------------------------------
--/ Callback subscribers
--/----------------------------------------------------------------------------
function init_slots()
	--/ avo_controller
  slot("avo_game_start", on_avo_game_start)
	--/ bind_stalker
  slot("actor_init", on_actor_init)
  slot("actor_net_spawn", on_actor_net_spawn)
  slot("actor_net_destroy", on_actor_net_destroy)
  slot("actor_reinit", on_actor_reinit)
  slot("actor_update", on_actor_update)
  slot("actor_save", on_actor_save)
  slot("actor_load", on_actor_load)
	
	slot("actor_take_item_from_box", on_actor_take_item_from_box)
	slot("actor_info_callback", on_actor_info_callback)
	slot("actor_on_trade", on_actor_on_trade)
	slot("actor_article_callback", on_actor_article_callback)
	slot("actor_on_item_take", on_actor_on_item_take)
	slot("actor_on_item_drop", on_actor_on_item_drop)
	slot("actor_use_inventory_item", on_actor_use_inventory_item)
	slot("actor_anabiotic_callback", on_actor_anabiotic_callback)
	slot("actor_anabiotic_callback2", on_actor_anabiotic_callback2)
	slot("actor_task_callback", on_actor_task_callback)
	
	slot("actor_hit_callback", on_actor_hit_callback)
	slot("actor_on_key", on_actor_on_key)
end

--/----------------------------------------------------------------------------
--/ Callbacks
--/----------------------------------------------------------------------------
function on_avo_game_start()
  dlog("AVO GAME STARTED")
end

function on_actor_init(actor_binder)
	dlog("actor_binder.__init(obj) called")
end

function on_actor_net_spawn(data)
	dlog("actor_binder.net_spawn(data) called")
end

function on_actor_net_destroy()
	dlog("actor_binder.net_destroy() called")
end

function on_actor_reinit()
	dlog("actor_binder.reinit() called")
end

function on_actor_update(delta)
	-- dlog("actor_binder.update(delta) called")
end

function on_actor_save(packet)
	dlog("actor_binder.save(packet) called")
end

function on_actor_load(reader)
	dlog("actor_binder.load(reader) called")
end

function actor_take_item_from_box(box, item)
	dlog("actor_binder.take_item_from_box(box, item) called")
end

function on_actor_info_callback(npc, info_id)
	dlog("actor_binder.info_callback(npc, info_id) called")
end

function on_actor_on_trade(item, sell_bye, money)
	dlog("actor_binder.on_trade(item, sell_bye, money) called")
end

function on_actor_article_callback(npc, group, name)
	dlog("actor_binder.article_callback(npc, group, name) called")
end

function on_actor_on_item_take(obj)
	dlog("actor_binder.on_item_take(obj) called")
end

function on_actor_on_item_drop(obj)
	dlog("actor_binder.on_item_drop(obj) called")
end

function on_actor_use_inventory_item(obj)
	dlog("actor_binder.use_inventory_item(obj) called")
end

function on_actor_anabiotic_callback()
	dlog("actor_binder.anabiotic_callback() called")
end

function on_actor_anabiotic_callback2()
	dlog("actor_binder.anabiotic_callback2() called")
end

function on_actor_task_callback(_task, _state)
	dlog("actor_binder.task_callback(_task, _state) called")
end

function on_actor_hit_callback(obj, amount, local_direction, who, bone_index)
	dlog("actor_binder.hit_callback(obj, amount, local_direction, who, bone_index) called")
end

local prev_key = nil
function on_actor_on_key(key)
	if key == keybind_toggle_top_hud and prev_key == keybind_shift_key then
		vlog("TOP hud toggled")
	elseif key == keybind_toggle_left_hud and prev_key == keybind_shift_key then
		vlog("LEFT hud toggled")
	elseif key == keybind_toggle_right_hud and prev_key == keybind_shift_key then
		vlog("RIGHT hud toggled")
	end
	prev_key = key
end